trigger:
  batch: true
  branches:
    include:
      - refs/tags/*
  paths:
    exclude: # no need to rebuild on changes in documentation
      - README.md
      - LICENSE
      - CHANGELOG.md
      - docs/**

schedules:
- cron: '0 1 * * *' # daily at 2am UTC
  displayName: 'Nightly Build'
  batch: true
  branches:
    include:
      - main

stages:
- stage: Build
  variables:
    solution: '**/*.sln'
    buildConfiguration: 'Release'
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1

  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'

    variables:
      buildProjects: '**/*.csproj'
      testProjects: '**/*[Tt]ests*.csproj'

    services:
      mongo:
        image: mongo
        ports:
          - 27017:27017

    steps:
    - task: gitversion/setup@0
      displayName: 'Setup GitVersion'
      inputs:
        versionSpec: '5.x'

    - task: gitversion/execute@0
      displayName: 'Determine Version'
      inputs:
        useConfigFile: true
        configFilePath: '$(Build.SourcesDirectory)/GitVersion.yml'

    - task: UseDotNet@2
      displayName: 'Install .NET SDK'
      inputs:
        version: '7.x'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore $(solution)'
      inputs:
        command: 'restore'
        projects: '$(solution)'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet build $(buildProjects)'
      inputs:
        projects: '$(buildProjects)'
        arguments: '-c $(buildConfiguration) --no-restore'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet test$(testProjects)'
      inputs:
        command: test
        projects: '$(testProjects)'
        arguments: >
          -c $(buildConfiguration)
          --no-build
          --collect "Code Coverage"

    - task: DotNetCoreCLI@2
      displayName: 'dotnet pack'
      inputs:
        command: pack
        nobuild: true
        versioningScheme: byEnvVar
        versionEnvVar: 'GITVERSION_NUGETVERSION'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        pathtoPublish: '$(build.artifactstagingdirectory)'
        artifactName: 'drop'

- stage: Release
  dependsOn: Build
  jobs:
  - deployment: Internal
    environment: Azure Artifacts
    pool:
      vmImage: 'ubuntu-latest'

    # only release non pr branches
    condition: |
      and
      (
        succeeded(),
        not(startsWith(variables['Build.SourceBranch'], 'refs/pull/'))
      )

    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop

          - task: NuGetAuthenticate@0
            displayName: 'NuGet Authenticate'

          - task: NuGetCommand@2
            displayName: 'NuGet push'
            inputs:
              command: push
              packagesToPush: '$(Pipeline.Workspace)/drop/**/*.nupkg'
              publishVstsFeed: 'tingle'
              allowPackageConflicts: true
